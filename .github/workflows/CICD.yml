name: CI Testing

on:
  pull_request:
  push:
    branches: [main, devel, release]
  schedule:
    - cron: "4 5 4 1/1 *" # Run monthly.

jobs:
  lint:
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v3
      - run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      # Python setup
      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Debug Info
        run: echo ${{ github.ref }} ${{ github.event_name }} ${{ endsWith(github.ref, 'heads/release') && (github.event_name == 'push') }}
        # refs/heads/main push false is the output of the main branch when tagged with a release ...

      - name: View Python --version
        run: python --version

      # Poetry Setup
      - name: Python Poetry Action
        uses: abatilo/actions-poetry@v2.1.6
        with:
          poetry-version: "1.7.1"

      - name: View poetry --version
        run: poetry --version
      - name: Install Stuff
        run: poetry install --no-root --only lint

      # Linting
      - name: Black
        run: poetry run python -m black . --check --diff
      - name: ruff
        run: poetry run ruff .
      - name: isort
        run: poetry run isort . --check

  ci:
    runs-on: "ubuntu-latest"
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        poetry-version: ["1.7.1"]
        experimental: [false]

    continue-on-error: ${{ matrix.experimental }}

    steps:
      - name: Debug Info
        run: echo ${{ github.ref }} ${{ github.event_name }} ${{ endsWith(github.ref, 'heads/release') && (github.event_name == 'push') }}
        # refs/heads/main push false is the output of the main branch when tagged with a release ...

      # Initial Setup
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup user
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      # Python setup
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: View Python --version
        run: python --version

      # Poetry Setup
      - name: Python Poetry Action
        uses: abatilo/actions-poetry@v2.1.6
        with:
          poetry-version: ${{ matrix.poetry-version }}
      - name: View poetry --version
        run: poetry --version

      # Package Setup
      - name: Install deps
        run: poetry install --no-interaction --verbose --with test --with plotting --with docs -vvv

      # CI checks
      - name: Pytest
        run: poetry run python -m pytest --cov . --cov-report=xml

      # Documentation setup
      - name: Setup Quarto
        uses: quarto-dev/quarto-actions/setup@v2
      - name: View Quarto version
        run: quarto --version

      # - name: mkdocs
      #   run: poetry run python -m mkdocs build --strict

      # - name: mike
      #   if: ${{ endsWith(github.ref, 'heads/main') &&  matrix.python-version == '3.11' }}
      #   run: poetry run mike deploy -p main experimental

      # Upload coverage
      - uses: codecov/codecov-action@v3
        with:
          verbose: true # optional (default = false)

  release:
    # Run when there is a new push on the release branch
    runs-on: "ubuntu-latest"
    permissions: write-all
    needs: ci
    if: endsWith(github.ref, 'heads/release') && (github.event_name == 'push')
    steps:
      - uses: actions/checkout@v3
      - run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')

      # Documentation setup
      - name: Setup Quarto
        uses: quarto-dev/quarto-actions/setup@v2
      - name: View Quarto version
        run: quarto --version

      # Python setup
      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: View Python --version
        run: python --version

      # Poetry Setup
      - name: Python Poetry Action
        uses: abatilo/actions-poetry@v2.1.6
        with:
          poetry-version: "1.7.1"
      - name: View poetry --version
        run: poetry --version

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to the GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Package Setup
      - name: Install deps
        run: poetry install -n -v --with docs

      - name: Build package
        run: |
          poetry build

      # Docker Setup
      - name: Build Docker image
        id: dockerbuild
        run: |
          docker build -t ghcr.io/jspaezp/ms2ml:v$(poetry version -s) .

      # Publish Docker
      - name: Push the Docker image to the GHCR
        id: ghcr_push
        run: |
          docker push ghcr.io/jspaezp/ms2ml:v$(poetry version -s)

      # Publishing Docs
      # - name: Deploy Docs
      #   env:
      #       GOOGLE_ANALYTICS_KEY: ${{ secrets.GOOGLE_ANALYTICS_KEY }}
      #   run: |
      #     poetry run mike deploy -p $(poetry version -s)

      # Publish Package
      - name: Publish Setup
        env:
          PYPITOKEN: ${{ secrets.PYPITOKEN }}
        run: |
          poetry config pypi-token.pypi ${PYPITOKEN}

      - name: Publish
        run: |
          poetry publish --no-interaction
