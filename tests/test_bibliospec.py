from __future__ import annotations

import numpy as np
import pytest

from ms2ml import AnnotatedPeptideSpectrum, Config
from ms2ml.data.adapters.bibliospec import BiblioSpecAdapter
from ms2ml.data.parsing.bibliospec import BiblioSpecParser, _decompress_peaks


def test_bibliospec_parser(shared_datadir):
    foo = BiblioSpecParser(shared_datadir / "bibliospec/Firstexp.blib")
    i = next(iter(foo))

    assert i["id"] == 1
    assert i["numPeaks"] == 14
    assert isinstance(i["peakIntensity"], np.ndarray)
    assert isinstance(i["peakMZ"], np.ndarray)


def test_bibliospec_adapter(shared_datadir):
    file = shared_datadir / "bibliospec/Firstexp.blib"

    adapter = BiblioSpecAdapter(file, config=Config())
    for i, spec in enumerate(adapter.parse()):
        if i == 0:
            assert len(spec.mz) == 14
        if i < 4:
            assert isinstance(spec, AnnotatedPeptideSpectrum)
            assert np.all(spec.intensity >= 0)


# >>> df["peakMZ"][0]
# >>> df["peakIntensity"][0]
# >>> df["numPeaks"][0]
peak_examples = [
    [
        b"x\x9cc```\xb0z\x15\xe5\x00\xa4\x18&\xdf\x8b\x05\xd1\ny\x82\t \xfa\xc0E!0\x9dp\xad!\tD/`NM\x05\xcb\xcb/\x81\xd0\x7f\xdc\xd2@\xf4\x03/\x8bL0\x7f\xc9\xe3\\\x10\xdd\xd0\xc2[\n6/\xc1\xb5\x0c,\xee\x13Y\x03\xe6\x1f\x8c\x03\xd3\x0b\x1a\xe5\x9a\xc0\xfa\xa4}&\x83\xf9\xbaeS\x1c\x00O\xe0\x1f\xf2",
        b"V\xccaEU\x8b\x83E\xea`\xa1Ev\xf8|Ee`\xa0EPa\xc8E\x87n\nF\xe4\xa0oFC\x1a\xbcE\x84i\xc4E\xf0\xee\xbbE\xb1\xf0\xe1E\x90\x8e\xabF\xfc\xb1\xdeEbO\xf8F\xe1\xc9\xf7E\xe1\xbb\xf6E",
        17,
    ],
    [
        b"x\x9c%\xd1oLUu\x1c\xc7\xf1_\xca\x93X\xb3y\xfd\xf3\x00\x96\x1d\xefqs\xf9w\xa3dm::RC\x9a\x86\xf3\xe2\x88\x80\xe5\x8f?fB\xdd\xe4^\xbcR\xe4\xf5x\x0f\xd4rDr\x07\xf7\x01sx\xe4\xcaZ\x0ftr\xd9x@s\x9eA\xe62r\x8btn\xd7\x07\x9c\x81\xb6\xb1\xb6\x1a\x97\x07\x065-\xdf\xdf\xf3\xe4\xb5\xcf\xf7\xf7\xfd\xfe\xfe\xec(\xa5\xf4\xd7o\xbdg\xa9\xff\xbf.\x07\xdd]\x93u\xcf\xd4\x89\x15G\x9e\xe9\xa5o\xa2\xffRP\xb3^f\xa2\xb5\xf5R=}\x85C\xe8.E\x1b\xc8#mho?\x89\xde#\xd1\xef\x8aI\xbe\xd8\xd0H\x7faZ<'\xaa\xe8,Z\xe1\xbdG\xb1\xddA\xe3n\n\xf5\xe2\xa4xg\x0e\xdd\x8be\x1f\xb0\xdf\xcb\xfbP\xb9s\xe2b\xf0\x18\xe7\xdd*Eu\xb9\x1e\xed\xf2\x06\xf1XB\xea\xfbW\x1eg\x9f\x05\x13\xfd\r\x0e\xaaHc3\xe7\x1ct\xc4\xdbCh\xdc\x9e\x14\x0ft~D\x7f\xf1et+\xf3\xc28e\xa2\x8e7\x8a\x0b\t\xf4_t>an\xea\x07\xf4\x9e\xac>\xc19\xf1\xc0\t\xd9w#\xeaCA\xb4\xaa\x8b\xd0[=!YM\xa3_\x9ai\xc5\xf84\xaa=\xb3\xad\xf2\xbfr\xa8\x9f\xd6Dx\xdf|/\x1a\xa7\x93\xa8\xca\x9f\xa0\xbe\x11\x89\xd2\xdf\x91@ux\x08\xad\xb5\x19\xd4WDo\x9b\xd9&\xff!$nw\xc4\xbfF\xd1\xbfZt\x92s\xdcR\xb1?\x82~*\x81\xfaZ\x0e\xd5\xbd`\x8c{\x14\xbc\x89\xeaB\xb9\xb8\xf0\x0e\xda\xb1Z\xb1p\xe5)\xee\xf5[\x00u\xac\x14\xad\xb1v\xf1\x858z\xf15\xed\xf8\x86\x89\xfer\x12\xdd\x1f\x87\xd0*\x1b\x15\x9fNH\xbdwQ\xf2\xce\xd1Oqx\x12\xd5\x8e9t\xb7,\xa2?b~\x86\xeb^A\xeb\x8fZ4\xf2\x9a\xd0\xbd\x95D{SZ\x8c\x95tP?\xe5\xa0\xdd=(\xfai13\x8a\xea\x90\xf99y\xfd\xab\xa8\xab+\xd1\xed\x0b\xa3\x9f\x8b\xa2W\xdc'\x8e\xdcA\xe3\xb9\xbb2\xd7\x11=\xcd\xdc\xb4\x19'7\xd5\x89\xadM\xe8?\x8e\xa3Q\xd5)\xe6\xcd\xc8\xfa\x91\x87\x92o\xae9\xc3{~M\x8b\x05\x01\x9bs\xfe}\x1b\xd5\xdf\xf5\xe8\x86\xc2h\x1f\xcfHn\x19C\xbf}\\\xeak\xb3\x92\x9f\xcf\xa1\xb1~Y\xf6\xd9\xbd\xe2,\xf5w\xf3\xd1\xfen\xe7Y\xb9O\x91\xe4\xe5\xd7\xd0\x8dTH_K\x08\xbd\x0f\xabP\xedk@}&%\xfd\x89\x01\xe9w\x06\xa5nnI\xc8;Ch\xf7\x84\xd1\xb3\x12\xa8\x873\xb2\xfe\xed\x18\x1a\xc1q\xa9\x0f\xe4;\xd8\xbf\n\xad\x9a\x00\xfa\xd7*\xd0K\x87\xd0\x1d\xae\x92\xbe\xefS\x92\xaf\x0fH\xff\xf5A4&r2WP\xd8I\xdf&\x13\xadl3\xfa\xbf\x84\xd1\x98\xcd\x88\x0f\xc7\xa4o~\x1c\xbd\xf3YT?\xe5w1w\x7f\x15z\x0b\x15h\xcf\x87\xa4\xfe{\x95\xf8g\r\xaa\x1b}h<NI}i@\xeaK\x832\xdfR\xf9\x05~\\\x8bv\xf1\x03\xc9\xaf\xcf\xa01\x1d\xf8\x92\xb9\x7f6\xa2*1%\x97lFw\xefV\xf4\xbe\xf9\xf9+\xde\xf1\xa0\xf2\x1c\xf7\x9e\xa9\x15\xb7uw\xb3OI\x1fz\xcd\x87{\xc8\xd5u\xa8\xf5\xd5\xf3\xec\xfb~\x06uY\x16\xbd\xb6d/}m)q\xcaKR\xef\xc9\xa2\xbf\x7f]\xbf\xf5\x1f.\xd8\xba\x90",
        b'x\x9c\x05\xc1kL\x93g\x18\x06`\n\x02u\x94N \xa5e\xa2\xd4\xda\xad(B\x8bX\xca\n\xce\x88\xe9{?\xefGE\x1d\x1e\xa6&\xd4P\xdd\x16\x1ds\x9a\x9a\x88\xc4\xc3\xb2\xc4\x80\x16\x82\xc6Cq2\xc6\x0f\xa3\x0b`d\xe0Z\xc1\x88V\xa1\xc1)RW\xe2i*\x96\x18\xb4L\x0c8h\xb0\xa2^\x97\xc4\xd6\x08#\xb2\x11\xe8\xdd\xcdz%F\xd4\x84\x1fa\xd3\x8e\xabi\xbcB\x0em\xd0\xce\xb4\x9f?%\xcf\xc3h\xf46x :\xa8\xa7H\xfdW\x08\x14\xbb\xd8p\x89\x0c\x86\xb8X~?U\x8c\xa3\x8b\x0e\xf1\x9a\x01-\xce\xffp\x9d)\xf2zX\xac\xa9\x07+\xc3\xac\xb4\xec}\x1b\xc3\x8f\xb7\xe0\r\x14\xd2\xe5\xe1~\xd4V[\xa8".\xc42\x1d%\xc2\xe5b9\xd1\xc4[V\xd9\xd6\xcfZ\xfd>\x96\x18p\xb2\x02\x89\x19W\x0f\xc7\xd0\x9a\x86,\xe8\n\x9b)eC6%\xec\xb6\xd1\x16.&\xdb\xba\x10\xbb\x9f\xb1\x85\xac\xaf\xe5\xb8Y\xfc\x9c\xf9;:\xa9a\x87\x0es\xa3\xbe\xc5pT\x1d\x99\x7f\xefd\x1eQ\x11\x95\xa4\xcc\x87c\xdb\x97p_SS\xd5\'{\xf9E!\x84xM&\x8e\x97\xbfB\xa5\xa5\x1d\xa5I.\x96\xba7\x9f\x124\xa5\xf4\xd0\x9bE\xde\x91p~E%#\xcf\n\x11|\xae)\xa6\xbbe"\xfb\x01\x05\x02\xa5\xdd\xf8\xd4\xb9\x14i\xb3&\xc8}!\x0c\x9bm7Y_\xe7c\xe4d-\xa4\xed\xbf\xa9\xe9\xde\xf8K\x84-\x99d\xca\x1c\x81\xa6\xb5\xfcB\x0b\x84E\xf8.\xa2\x90\x1e\x0fu\xa0P\xb4\x1c\xfb\x87\xa4\xdc\xb1k5\xecA\x1fS\x8c\xdcAKZ\x03\xa9VJajN\xa42\x8d\x9f\x1dx\x1d\xcb\xdf\xec\x88D\xd4O"\xb2\xa82\x90\x90\xf3\x06\xdc\xeda\xe1e\x07\xb1\xfe\x8e\x9f\xf5\x99C\xecv\xb6\x06\xa1\r\xbf\xd2\x13\x97\x0f\xe3\x97$8c\xfd\x03\x95c\xff\xb2{O}\xd0\xef\xcb\xa2\xb8\xc1\xbb\x88>&\xa6\xb5\x9a\x14\xd2F\xc8\xb0\xf8\xad\x96\x82]R(Bbr\xa8g\xe1\xd4\xe9V*K\xab\xa3\xad\xff\xe7\xf3\xaf\x93E|j\xde\x178\xf6s4\x12\xc7\xe5\xe4\xc8\x0ba\xcf\xcez:\xa1\xbf\x81k7V\t13\xff\xe2U\xf5Av\xd7\xda\x85F\xf7|\n\xf6\xf5\xb3\xdc\xdc<8<.\xac\xb5\xa5q\xaf!\x9d\x7fS\xa7B\xfb\x9f]\x18\x8e\xc8\xa5\xee\x17\x1fXQ\xab\x8c\xf6?\x1a\x10\x94\xb3\x97\x0b\'\x1f\x19\xc8l\xea\x84s\xbd\x81&\xf5@\x86\xc4\x84=\xc5:ar\xc8\xc9\xab\xaa"\xb1\xac\xd6H\xffY\x8d\xb8\xba\xc9\t\xe7\xf9HJo\x97\xd3\x8cz\x1d>\xb3\x9b\n\xe6\xe8\xbb\x85\xd1}u\xd4b\x91\xe3d\xa3\x94\xafX\xe3\xc5D\xcc\xdf\x10\xc5\x0f\xa2HzZ\xd8\xee\xcb\x10\x94\xe2WX<\'\x0e\xd6!+UdN\xe1A\xc7Y*\xea9K\x0f,\xf9\xb80 E\xfc6?\x14\x1b\x0f\x17\xcchR\x17\x9c8:\x97\xe7o\x1e\xa1w\xeep\xaaV\x11\x8c\xff$\x81%\xabQ3O\x89r\xd9B\xe1\xfbS/\xf93\xe5\x18\xbcM"\xb4\x1d\xf2\x90c\xd4\x89%\xf6\x0fx?}\x94]\xdf\x1aAM\xa9R\xc4\xa8v\x91\xf9\xc9 \xa6\xb7K0\xfbY\x12\x9d+\x8fE\xbav\x8c\xd56\'Co\x08\xb1\x8ff\x14Y\x1e',
        206,
    ],
]


@pytest.mark.parametrize("mz,ints,num", peak_examples)
def test_bibliospec_decompression(mz, ints, num):
    mz, ints = _decompress_peaks(mz, ints, num)
    assert len(mz) == num
    assert len(ints) == num
